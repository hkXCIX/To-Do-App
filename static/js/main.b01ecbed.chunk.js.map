{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","value","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","edit","placeholder","name","ref","onChange","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","type","TodoList","setTodos","test","newTodos","updatedTodos","removedItem","filter","todoId","newVal","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAgEeA,MA9Df,SAAkBC,GACjB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACTF,EAASG,QAAQC,WAGlB,IAAMC,EAAe,SAAAC,GACpBP,EAASO,EAAEC,OAAOC,QAGbC,EAAe,SAAAH,GACnBA,EAAEI,iBAGFd,EAAMe,SAAS,CACdC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMlB,IAEPC,EAAS,KAGX,OACC,sBAAMkB,UAAU,YAAYN,SAAUF,EAAtC,SACCb,EAAMsB,KAEN,qCACC,uBACAC,YAAY,cACZX,MAAOV,EACPsB,KAAK,OACLH,UAAU,oBACVI,IAAKrB,EACLsB,SAAUjB,IAEV,wBAAQkB,QAASd,EAAcQ,UAAU,mBAAzC,uBAOD,qCACC,uBACAE,YAAY,aACZX,MAAOV,EACPsB,KAAK,OACLH,UAAU,aACVI,IAAKrB,EACLsB,SAAUjB,IAEV,wBAAQkB,QAASd,EAAcQ,UAAU,cAAzC,4B,qBCOWO,MAzDf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAE/C,EAAwB/B,mBAAS,CAChCe,GAAI,KACJJ,MAAO,KAFR,mBAAOU,EAAP,KAAaW,EAAb,KAcA,OAAIX,EAAKN,GACD,cAAC,EAAD,CAAUM,KAAQA,EAAMP,SAThB,SAAAH,GACfoB,EAAWV,EAAKN,GAAIJ,GACpBqB,EAAQ,CACPjB,GAAI,KACJJ,MAAO,QAQFiB,EAAMK,KAAK,SAACC,EAAMC,GAAP,OACjB,sBACCf,UAAWc,EAAKE,WAAa,oBAAsB,WADpD,UAKC,qBAAmBV,QAAS,kBAAMG,EAAaK,EAAKnB,KAApD,SACGmB,EAAKf,MADEe,EAAKnB,IAIf,sBAAKK,UAAU,QAAf,UACC,gCAEA,uBACCiB,KAAK,eAKN,cAAC,IAAD,CACCX,QAAS,kBAAMI,EAAWI,EAAKnB,KAC/BK,UAAU,gBAKX,cAAC,IAAD,CACCM,QAAS,kBAAMM,EAAQ,CAACjB,GAAImB,EAAKnB,GAAIJ,MAAOuB,EAAKf,QACjDC,UAAU,mBAzBPe,OC0COG,MAhEf,WAEC,MAA0BtC,mBAAS,IAAnC,mBAAO4B,EAAP,KAAcW,EAAd,KAwCA,OACC,gCACC,0CAGA,iDACiB,cAAC,IAAD,OAEjB,iDACiB,cAAC,IAAD,OAEjB,cAAC,EAAD,CAAUzB,SAjDI,SAAAoB,GAEf,GAAIA,EAAKf,OAAQ,QAAQqB,KAAKN,EAAKf,MAAnC,CAIA,IAAMsB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OA0CR,cAAC,EAAD,CACCb,MAASA,EACTC,aAnCkB,SAAAd,GACpB,IAAI2B,EAAed,EAAMK,KAAI,SAAAC,GAI5B,OAHIA,EAAKnB,KAAOA,IACfmB,EAAKE,YAAcF,EAAKE,YAElBF,KAERK,EAASG,IA6BPZ,WA1CgB,SAAAf,GAClB,IAAM4B,EAAc,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKnB,KAAOA,KAE1DwB,EAASI,IAwCPZ,WA3BgB,SAACc,EAAQC,GACvBA,EAAO3B,OAAQ,QAAQqB,KAAKM,EAAO3B,OAIvCoB,GACC,SAAAQ,GAAI,OAAIA,EAAKd,KACZ,SAAAe,GAAI,OACHA,EAAKjC,KAAO8B,EAASC,EAAQE,eC9BnBC,MAVf,WACE,OACE,qBAAK7B,UAAU,YAAf,SAEE,cAAC,EAAD,OCJN8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b01ecbed.chunk.js","sourcesContent":["import React, {useState, useRef, useEffect} from 'react'\r\n\r\nfunction TodoForm(props) {\r\n\tconst [input, setInput] = useState(\"\")\r\n\r\n\tconst inputRef = useRef(null)\r\n\t\r\n\tuseEffect(() => {\r\n\t\tinputRef.current.focus()\r\n\t})\r\n\t\r\n\tconst handleChange = e => {\r\n\t\tsetInput(e.target.value);\r\n\t}\r\n\r\n\tconst handleSubmit = e => {\r\n\t\t\te.preventDefault()\r\n\r\n\t\t\t//creating id values for each todo to be able to edit or update later\r\n\t\t\tprops.onSubmit({\r\n\t\t\t\tid: Math.floor(Math.random() * 100000),\r\n\t\t\t\ttext: input\r\n\t\t\t})\r\n\t\t\tsetInput(\"\");\r\n\t\t};\r\n\r\n\treturn (\r\n\t\t<form className=\"todo-form\" onSubmit={handleSubmit}>\r\n\t\t{props.edit ? \r\n\t\t(\r\n\t\t\t<>\r\n\t\t\t\t<input\r\n\t\t\t\tplaceholder=\"Update todo\"\r\n\t\t\t\tvalue={input}\r\n\t\t\t\tname=\"test\"\r\n\t\t\t\tclassName=\"update todo-input\"\r\n\t\t\t\tref={inputRef}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<button onClick={handleSubmit} className=\"edit todo-button\">\r\n\t\t\t\tUpdate\r\n\t\t\t\t</button> \r\n\t\t\t</>\r\n\t\t) \r\n\t\t: \r\n\t\t(\r\n\t\t\t<>\r\n\t\t\t\t<input \r\n\t\t\t\tplaceholder=\"Add a todo\" \r\n\t\t\t\tvalue={input}\r\n\t\t\t\tname=\"text\" \r\n\t\t\t\tclassName=\"todo-input\"\r\n\t\t\t\tref={inputRef}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<button onClick={handleSubmit} className=\"todo-button\">\r\n\t\t\t\t\tAdd todo\r\n\t\t\t\t</button>\r\n\t\t\t</>\r\n\t\t)}\t\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport {RiCloseCircleLine} from 'react-icons/ri'\r\nimport {TiEdit} from 'react-icons/ti'\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\r\n\r\n\tconst [edit, setEdit] = useState({\r\n\t\tid: null,\r\n\t\tvalue: \"\"\r\n\r\n\t})\r\n\r\n\tconst updated = value => {\r\n\t\tupdateTodo(edit.id, value)\r\n\t\tsetEdit({\r\n\t\t\tid: null,\r\n\t\t\tvalue: \"\"\r\n\t\t})\r\n\t}\r\n\r\n\tif (edit.id) {\r\n\t\treturn <TodoForm edit = {edit} onSubmit = {updated} />\r\n\t}\r\n\r\n\treturn todos.map( (todo, index) => (\r\n\t\t<div \r\n\t\t\tclassName={todo.isComplete ? \"todo-row complete\" : \"todo-row\"} \r\n\t\t\tkey={index}\r\n\t\t>\r\n\r\n\t\t\t<div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n\t\t\t\t\t{todo.text}\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"icons\">\r\n\t\t\t\t<label>\r\n\t\t\t\t\r\n\t\t\t\t<input\t\r\n\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t />\r\n\t\t\t\t</label>\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t<RiCloseCircleLine \r\n\t\t\t\t\tonClick={() => removeTodo(todo.id)}\r\n\t\t\t\t\tclassName=\"delete-icon\"\r\n\t\t\t\t/>\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t<TiEdit\r\n\t\t\t\t\tonClick={() => setEdit({id: todo.id, value: todo.text})}\r\n\t\t\t\t\tclassName=\"edit-icon\"\r\n\t\t\t\t/>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t))\r\n}\r\n\r\nexport default Todo\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo';\r\nimport {RiCloseCircleLine} from 'react-icons/ri'\r\nimport {TiEdit} from 'react-icons/ti'\r\n\r\nfunction TodoList() {\r\n\t\r\n\tconst [todos, setTodos] = useState([]);\r\n\t\r\n\tconst addTodo = todo => {\r\n\t\t//this is to make sure input won't be blank and spaces are auto removed\r\n\t\tif(!todo.text || /^\\s*$/.test(todo.text)){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst newTodos = [todo, ...todos]\r\n\r\n\t\tsetTodos(newTodos);\r\n\t}\r\n\r\n\tconst removeTodo = id => {\r\n\t\tconst removedItem = [...todos].filter(todo => todo.id !== id);\r\n\r\n\t\tsetTodos(removedItem)\r\n\t}\r\n\r\n\tconst completeTodo = id => {\r\n\t\tlet updatedTodos = todos.map(todo => {\r\n\t\t\tif (todo.id === id) {\r\n\t\t\t\ttodo.isComplete = !todo.isComplete\r\n\t\t\t}\r\n\t\t\treturn todo\r\n\t\t})\r\n\t\tsetTodos(updatedTodos)\r\n\t}\r\n\r\n\tconst updateTodo = (todoId, newVal) => {\r\n\t\tif(!newVal.text || /^\\s*$/.test(newVal.text)){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsetTodos(\r\n\t\t\tprev => prev.map(\r\n\t\t\t\titem => (\r\n\t\t\t\t\titem.id === todoId ? newVal: item)))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>\r\n\t\t\t\tTodo App\r\n\t\t\t</h1>\r\n\t\t\t<p>\r\n\t\t\t\tTo remove click <RiCloseCircleLine/>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tTo update click <TiEdit/>\r\n\t\t\t</p>\r\n\t\t\t<TodoForm onSubmit={addTodo} />\r\n\t\t\t<Todo\r\n\t\t\t\ttodos = {todos}\r\n\t\t\t\tcompleteTodo = {completeTodo} \r\n\t\t\t\tremoveTodo = {removeTodo}\r\n\t\t\t\tupdateTodo = {updateTodo}\r\n\t\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoForm from './components/TodoForm';\r\nimport TodoList from './components/TodoList';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"todo-list\">      \r\n\r\n      <TodoList/>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}